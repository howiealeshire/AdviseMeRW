from constraint import *


'''
days = ['m','t','w','r','f']
#these are hard-coded for now
min_courses = int(p.min_courses)
max_courses = int(p.max_courses)
max_days = ['m','w','r']            # [1,1,1,1,1] # all days checked
min_days = ['m','t','w']  # what the user wants

# These are the times the user requested
hour_time_to = p.time_to[0]
hour_time_from = p.time_from[0]
minute_time_to = p.time_to[1]
minute_time_from = p.time_from[1]


max_time = int((str(hour_time_to).strip() + str(minute_time_to).strip()).strip()) #11 pm
min_time = int((str(hour_time_from).strip() + str(minute_time_from).strip()).strip())  #8 am

print(max_time)
print(min_time)
#sg = problem.getSolutions()
#
times = list(range(80,2400))
num_courses = list(range(min_courses,max_courses+1))

categories = p.cat
locations = p.loc
subjects = p.subjects
professors = p.prof
'''


'''
problem.addConstraint(lambda day,time,num_course,professor,subject,location:
                      day in max_days
                      and time <= max_time
                      and any(x in day for x in min_days)
                      and time >= min_time
                      and num_course <= max_courses
                      and num_course >= min_courses
                      and professor in professors
                      and subject in subjects
                      and location in locations
                      ,
                          ("day", "time","num_course","professor","subject","location"))
 


'''








def main(loc,cat,prof,days,time_to,time_from,time_interval,subjects,num_courses):
   print('location: ' + loc)
   print('categories: ' + cat)
   print('profs: ' + prof)
   print('days: ' + str(days))
   print('time_to: '  +  str(time_to))
   print('time_from: ' + str(time_from))
   print('time_interval: ' + str(time_interval))
   print('subjects: ' + str(subjects))
   print('num_courses: ' + str(num_courses))

   min_courses = num_courses[0]
   max_courses = num_courses[1]

   #turn time into fractional representation
   max_time = time_to[0] + (.01 * time_to[1])
   min_time = time_from[0] + (.01 * time_from[1])

   print(max_time)
   print(min_time)




   problem = Problem()

   problem.addVariable("day", days)
   problem.addVariable("time", time_to)
   problem.addVariable("num_course",num_courses)
   problem.addVariable("location",loc)
   problem.addVariable("professor",prof)
   problem.addVariable("category",cat)
   problem.addVariable("subject",subjects)
   


    
if __name__ == "__main__": main()










